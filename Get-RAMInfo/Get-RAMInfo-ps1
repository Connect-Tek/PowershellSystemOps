function Get-RAMInfo {
    <#
.SYNOPSIS
    Retrieves physical memory (RAM) information from local or remote computers.

.DESCRIPTION
    The Get-RAMInfo function collects detailed physical memory module information using WMI/CIM.
    It supports exporting results to CSV, JSON, TXT, XML, or HTML, querying remote computers,
    and outputting raw CIM data for advanced users.

.PARAMETER ComputerName
    One or more computer names to query. Defaults to the local computer if not specified.

.PARAMETER ExportFormat
    Optional. Specifies the format for exporting results. Valid options are: CSV, JSON, TXT, XML, HTML.

.PARAMETER ExportPath
    Optional. Path where the export file will be saved. If a folder is provided, a filename is auto-generated.

.PARAMETER Raw
    If specified, returns raw WMI/CIM objects instead of parsed fields.

.EXAMPLE
    Get-RAMInfo

    Retrieves RAM info from the local machine and returns structured data to the console.

.EXAMPLE
    Get-RAMInfo -ComputerName "PC1","PC2" -ExportFormat JSON

    Queries RAM data from PC1 and PC2 and exports the results as a JSON file to the temp directory.

.EXAMPLE
    Get-RAMInfo -ExportFormat CSV -ExportPath "C:\Users\computer\Downloads"

    Exports the local RAM info to a CSV file in the specified directory.

.NOTES
    Author: ConnectTek
    Last Updated: 20/07/2025
    Requires: PowerShell 5.1 or later

#>

    [CmdletBinding(
        SupportsShouldProcess = $False,
        ConfirmImpact = 'None'
    )]
    param (
        [Parameter(Mandatory = $false)]
        [ValidatePattern('^[a-zA-Z0-9\-\.]{1,255}$')]
        [string[]]$ComputerName = $env:COMPUTERNAME,

        [Parameter(Mandatory = $false)]
        [string]$ExportFormat,

        [Parameter(Mandatory = $false)]
        [string]$ExportPath,

        [Parameter(Mandatory = $false)]
        [switch]$Raw
    )

    $validFormats = @('CSV','JSON','TXT','XML','HTML')
    $results = @()

    $scriptBlock = {
        param($rawFlag)

        try {
            $modules = Get-CimInstance -ClassName Win32_PhysicalMemory -ErrorAction Stop
        }
        catch {
            Write-Error "[$env:COMPUTERNAME] Failed to retrieve RAM info: $_"
            return
        }

        $output = @()

        foreach ($m in $modules) {
            if ($rawFlag) {
                $output += [pscustomobject]@{
                    ComputerName = $env:COMPUTERNAME
                    RAM          = $m
                }
            }
            else {
                $output += [pscustomobject]@{
                    'ComputerName'        = $env:COMPUTERNAME
                    'Bank Label'          = $m.BankLabel
                    'Capacity (GB)'       = [math]::Round($m.Capacity / 1GB, 2)
                    'Speed (MHz)'         = $m.Speed
                    'DataWidth (bits)'    = $m.DataWidth
                    'Manufacturer'        = $m.Manufacturer
                    'Part Number'         = $m.PartNumber.Trim()
                    'Serial Number'       = $m.SerialNumber
                }
            }
        }

        return $output
    }

    foreach ($comp in $ComputerName) {
        try {
            if ($comp -eq $env:COMPUTERNAME) {
                $results += & $scriptBlock $Raw
            }
            else {
                $output = Invoke-Command -ComputerName $comp -ScriptBlock $scriptBlock -ArgumentList $Raw -ErrorAction Stop
                $results += $output
            }
        }
        catch {
            Write-Error "Error collecting data from '$comp': $_"
        }
    }

    if ($Raw) { return $results }

    if (-not $ExportFormat) {
        return $results
    }

    if ($ExportFormat -notin $validFormats) {
        Write-Error "Invalid ExportFormat '$ExportFormat'. Valid options are: $($validFormats -join ', ')"
        return
    }

    if (-not $ExportPath) {
        $stamp = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'
        $ExportPath = Join-Path $env:TEMP "RAM_$stamp.$($ExportFormat.ToLower())"
    }
    elseif (Test-Path $ExportPath -PathType Container) {
        $stamp = Get-Date -Format 'yyyyMMdd_HHmmss'
        $ExportPath = Join-Path $ExportPath "RAM_$stamp.$($ExportFormat.ToLower())"
    }

    try {
        switch ($ExportFormat) {
            'CSV'  { $results | Export-Csv -Path $ExportPath -NoTypeInformation -Force }
            'JSON' { $results | ConvertTo-Json -Depth 10 | Set-Content -Path $ExportPath -Force }
            'TXT'  { $results | Out-String | Set-Content -Path $ExportPath -Force }
            'XML'  { $results | ConvertTo-Xml -As String -Depth 5 | Set-Content -Path $ExportPath -Force }
            'HTML' { $results | ConvertTo-Html | Set-Content -Path $ExportPath -Force }
        }

        Write-Verbose "Export successful. Saved to: $ExportPath"
    }
    catch {
        Write-Error "Failed to export to '$ExportPath': $_"
        return
    }

    return $ExportPath
}
